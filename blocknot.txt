class Board {
    constructor() {
        this.cells = [
            {
                id: 1,
                value: ' ',
            },
            {
                id: 2,
                value: ' ',
            },
            {
                id: 3,
                value: ' ',
            },
            {
                id: 4,
                value: ' ',
            },
            {
                id: 5,
                value: ' ',
            },
            {
                id: 6,
                value: ' ',
            },
            {
                id: 7,
                value: ' ',
            },
            {
                id: 8,
                value: ' ',
            },
            {
                id: 9,
                value: ' ',
            },
        ];
    }

    print() {
        for (let i = 0; i < 9; i++) {
            process.stdout.write(this.cells[i]);
        }
    }

    isCellSelected(num) {
        let cell = this.cells.find(({ id }) => id == num)
        return cell.value !== ' ';
    }

    takeTurnFirst(num) {
        let cell = this.cells.find(({ id }) => id == num)
        return cell.value = 'X';
    }

    takeTurnSecond(num) {
        let cell = this.cells.find(({ id }) => id == num)
        return cell.value = 'O';
    }

    getAvailableCell() {
        let availableCells = this.cells.filter(cell => cell.value == ' ');
        return availableCells;
    }

    // need fixing ->
    getWinner() {
        let combos = [
            [{ id: 1 }, { id: 2 }, { id: 3 }],
            [{ id: 4 }, { id: 5 }, { id: 6 }],
            [{ id: 7 }, { id: 8 }, { id: 9 }],
            [{ id: 1 }, { id: 4 }, { id: 7 }],
            [{ id: 2 }, { id: 5 }, { id: 8 }],
            [{ id: 3 }, { id: 6 }, { id: 9 }],
            [{ id: 1 }, { id: 5 }, { id: 9 }],
            [{ id: 3 }, { id: 5 }, { id: 7 }],
        ];
        for (let i = 0; i < 8; i++) {
            const combo = [];

            if (combo[0] != ' ' && combo[0] == combo[1] && combo[1] == combo[2]) {
                return combo[0];
            }
        }

        return this.getAvailableCell().length == 0 ? 'Me' : null;
    }
}

module.exports = Board;


////////////////////////////////////////////////////////


const express = require('express');
const cors = require('cors');
const PORT = process.env.PORT || 5000;

const Board = require('./tictactoe/tictactoe');

const app = express();
app.use(cors());
app.use(express.json());

const board = new Board()

isGameOver = () => board.getWinner() != null;

getGameState = () => ({
    gameOver: isGameOver(),
    winner: board.getWinner(), //TODO: dont work now, nead fix
    cells: board.cells,
});

app.get('/game', (req, res) => {
    res.send(getGameState());
});

app.post('/game', (req, res) => {
    board = new Board();
    res.send(getGameState());
});

app.post('/turn', (req, res) => {
    if (isGameOver()) {
        return res.sendStatus(409);
    }

    let { x, y } = req.body;

    if (isNaN(x) || isNaN(y) || x < 0 || x > 2 || y < 0, y > 2) {
        return res.sendStatus(400);
    }

    if (board.isCellSelected(x, y)) {
        return res.sendStatus(403);
    }

    board.takeTurnFirst(x, y);

    if (isGameOver()) {
        return res.send(getGameState());
    }

    board.takeTurnSecond(x, y);

    res.send(getGameState())
});



app.listen(PORT, () => console.log(`Listening on localhost:${PORT}`))






